@page "/"
@using MLProject;

@inject IJSRuntime JS

<label for="filePicker" class="label">
    <span class="title">Vælg en fil</span>
    <InputFile id="filePicker" class="fileUpload invisible" @ref="inputFile" accept=".jpg" OnChange="@(async e => {await ShowPreview(e);})" />
</label>


@if (imgComponent != null)
{
    <div>
        <img alt="Component" class="fancyImg" @ref="previewImageElem" width="375" />
    </div>
}
else
{
    <div>
        <img alt="Component" class="fancyImg" src="Phoot/default.jpg" width="375" />
    </div>
}
@code {
    //--------| Preview Img |--------//
    private InputFile? inputFile;
    private ElementReference previewImageElem;
    private InputFileChangeEventArgs imgComponent = null!; //Save new image

    protected async Task ShowPreview(InputFileChangeEventArgs e)
    {
        imgComponent = e;
        await JS.InvokeVoidAsync("previewImage", inputFile!.Element, previewImageElem);
        Program();
    }

    protected void Program()
    {
        Console.WriteLine(inputFile.ToString());
        //var imageBytes = File.ReadAllBytes(inputFile.);
        // MLModel1.ModelInput sampleData = new MLModel1.ModelInput()
        // {
        //     ImageSource = imageBytes,
        // };

        // // Make a single prediction on the sample data and print results.
        // var sortedScoresWithLabel = MLModel1.PredictAllLabels(sampleData);
        // Console.WriteLine($"{"Class",-40}{"Score",-20}");
        // Console.WriteLine($"{"-----",-40}{"-----",-20}");

        // foreach (var score in sortedScoresWithLabel)
        // {
        //     Console.WriteLine($"{score.Key,-40}{score.Value,-20}");
        // }
    }
}